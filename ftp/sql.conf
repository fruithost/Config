#
# Proftpd sample configuration for SQL-based authentication.
#
# (This is not to be used if you prefer a PAM-based SQL authentication)
#

<IfModule mod_sql.c>
#
# Choose a SQL backend among MySQL or PostgreSQL.
# Both modules are loaded in default configuration, so you have to specify the backend 
# or comment out the unused module in /etc/proftpd/modules.conf.
# Use 'mysql' or 'postgres' as possible values.
#
SQLBackend	mysql
#
SQLEngine on
#SQLAuthenticate on
#
# Use both a crypted or plaintext password 
#SQLAuthTypes Plaintext Crypt
#
# Use a backend-crypted or a crypted password
SQLAuthTypes     SHA256
SQLAuthenticate         users groups
SQLPasswordEngine       on

#
# Connection (without password, local!)
SQLConnectInfo  fruithost@localhost ftp
#
# Describes both users/groups tables
#
#SQLUserInfo     fh_ftp_user `username` `password` NULL NULL `path` `shell`
SQLNamedQuery get-user SELECT "CASE WHEN `fh_ftp_user`.`username` is NULL THEN `fh_users`.`username` ELSE CONCAT(`fh_users`.`username`, '_', `fh_ftp_user`.`username`) END AS `userid`, `fh_ftp_user`.`password` AS `passwd`, '1010' AS `uid`, '1010' AS `gid`, `fh_ftp_user`.`path` AS `homedir`, '/sbin/nologin' AS `shell` FROM `fh_ftp_user`, `fh_users` WHERE CONCAT(`fh_users`.`username`, '_', `fh_ftp_user`.`username`)='%U' OR (`fh_users`.`username`='%U' AND `fh_ftp_user`.`username` IS NULL)"
SQLUserInfo custom:/get-user

SQLMinUserUID 1010
SQLDefaultUID 1010
SQLMinUserGID 1010
SQLMinID 1010
CreateHome on
SQLLogFile /var/fruithost/logs/ftp_sql.log

# Hardcoded groups
SQLNamedQuery get-group-by-name SELECT "`username` AS `groupname`, '1010' AS `gid`, `username` AS `members` FROM `fh_ftp_user` WHERE `username`='%{0}'"
SQLNamedQuery get-group-by-id SELECT "`username` AS `groupname`, '1010' AS `gid`, `username` AS `members` FROM `fh_ftp_user` WHERE `username`='%{0}'"
SQLNamedQuery get-group-by-member SELECT "`username` AS `groupname`, '1010' AS `gid`, `username` AS `members` FROM `fh_ftp_user` WHERE `username`='%{0}'"
SQLGroupInfo custom:/get-group-by-name/get-group-by-id/get-group-by-member
 
# User quotas
# ===========
QuotaEngine on
QuotaDirectoryTally on
QuotaDisplayUnits Mb
QuotaShowQuotas on
 
SQLNamedQuery get-quota-limit SELECT "`name`, `type`, `session`, `limit`, `bytes_in`, `bytes_out`, `bytes_transfer`, `files_in`, `files_out`, `files_transfer` FROM `fh_ftp_quota_limits` WHERE `name`='%{0}' AND `type`='%{1}'"
 
SQLNamedQuery get-quota-tally SELECT "`name`, `type`, `session`, `limit`, `bytes_in`, `bytes_out`, `bytes_transfer`, `files_in`, `files_out`, `files_transfer` FROM `fh_ftp_quota_usage` WHERE `name`='%{0}' AND `type`='%{1}'"
 
SQLNamedQuery update-quota-tally UPDATE "`bytes_in`=`bytes_in` + %{0}, `bytes_out`=`bytes_out` + %{1}, `bytes_transfer`=`bytes_transfer` + %{2}, `files_in`=`files_in` + %{3}, `files_out`=`files_out` + %{4}, `files_transfer`=`files_transfer` + %{5} WHERE `name`='%{6}' AND `type`='%{7}'" fh_ftp_quota_usage
 
SQLNamedQuery insert-quota-tally INSERT "%{0}, %{1}, %{2}, %{3}, %{4}, %{5}, %{6}, %{7}" fh_ftp_quota_usage
 
QuotaLimitTable sql:/get-quota-limit
QuotaTallyTable sql:/get-quota-tally/update-quota-tally/insert-quota-tally
 
RootLogin off
RequireValidShell off
</IfModule>
